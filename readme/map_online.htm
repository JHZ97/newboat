<!DOCTYPE html>  
<html>
	<head>  
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />  
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
		<title>Hello, World</title>  
		<style type="text/css">  
			html{height:100%}  
			body{height:100%;margin:0px;padding:0px}  
			#container{width: 100%;height: 100%;overflow: hidden;margin:0;font-family:"微软雅黑"}  
		</style>  
		<script type="text/javascript" src="http://api.map.baidu.com/getscript?v=3.0&ak=x6snAPtz1yvu1I9Zcl28sC6CritvnQCo"></script>
		<script type="text/javascript" src="qwebchannel.js"></script>
	</head>  
	<body>  
	<div id="container"></div> 
	</body>  
</html>
<script type="text/javascript"> 
	var map = new BMap.Map("container");//创建地图实例
	var ini_point = new BMap.Point(120.125055,30.261413);//创建初始点坐标 浙江大学玉泉校区 
	map.centerAndZoom(ini_point, 15);//初始化地图,设置中心点坐标和地图级别
	map.enableScrollWheelZoom(true);//开启滚轮缩放
	map.setMapType(BMAP_SATELLITE_MAP);//设置地图显示样式为卫星图
	//向地图添加控件
	map.addControl(new BMap.NavigationControl());    
	map.addControl(new BMap.ScaleControl());    
	map.addControl(new BMap.OverviewMapControl());    
	map.addControl(new BMap.MapTypeControl()); 
	//把boolFlag声明为Boolean对象 初始化赋值为true
	var boolFlag = new Boolean(true);
	//将Qt和Js交互的注册代码放在地图初始化之后,可以保证前面的代码也能执行,即不在Qt中运行程序,也可以直接在浏览器显示前面初始化好的地图
	//Qt和Js交互 注册完毕后即可进行交互
	//************************************************************************************
	new QWebChannel(qt.webChannelTransport,
		function(channel){
			window.bridge = channel.objects.passId; //注册
		})
	//************************************************************************************	
	var cur_point = null;//给cur_point初始值为null
	var path=[cur_point];//cur_point用来存放点的坐标
	map.addEventListener("mousemove",event2);//添加鼠标移动的事件监听函数	
	//鼠标移动的响应 鼠标在地图上移动 会调用Qt中的showGPS函数
	//showGPS函数实现功能:在Qt的ui界面中的两个QLabel标签中(terminal_lon和terminal_lat)分别显示当前鼠标所在位置的经纬度
	function event2(e){
		window.bridge.showGPS(e.point.lng,e.point.lat);
	}				
	//************************************************************************************************
    //path_model send_path path_clean quit_path_set这四个函数在自主设置路径中要用到
	//进入设置状态(设置了监听鼠标事件)
	//Qt中的这个按钮 btn_set_terminal 即是"设置路径 也是"发送路径 自动按逻辑切换
	//Qt中点击"设置路径",会调用Js中的path_model函数
	//1.清除"标签"为"t"的"标记" 这里的"t"即 terminal终点的意思 含义:清除目前的终点坐标 为下面设置新的路线做准备
	//2.清除所有覆盖物 为下面设置新路线做准备
	//3.设置鼠标点击(click)事件 如果鼠标点击了就执行event1函数
	function path_model()
	{
		clearMaker("t");
		map.clearOverlays(); 
		map.addEventListener("click",event1);
	}
	//函数功能:清除"标签"为label的"标记"   "标记":e.g地图上的红点  "标签":e.g添加的文字注释
	//1.获取地图上所有的"标记"
	//2.在for循环中遍历所有的"标记" 
	//如果当前"标记"的"标签"没有设置(即为null)或者"标签"的内容为label,则删除当前"标记"
	function clearMaker(label){
	var allOverlay = map.getOverlays();
			for (var i = 0; i < allOverlay.length ; i++){
				 if (allOverlay[i] instanceof BMap.Marker) {
					if (allOverlay[i].getLabel() == null || allOverlay[i].getLabel().content == label) {
						map.removeOverlay(allOverlay[i]);
						return false;
					}
				}
			}
	}
	//鼠标点击的响应
	//1.鼠标点击地图,则会获取点击点的经纬度信息,并将该点加入(push)到path数组中,用来画线
	//2.调用drawLine()函数画线
	function event1(e){
		path.push(new BMap.Point(e.point.lng,e.point.lat));
		drawLine();
	}
	//画线
	//1.path传的是一些列点,用来画线的;设置画出的线的样式
	//2.添加覆盖物lines
	//设置终点坐标为path[path.length-1]
	function drawLine(){
		//map.clearOverlays();
		var lines = new BMap.Polyline(path,{strokeColor:"yellow", strokeWeight:2, strokeOpacity:0.5});
		map.addOverlay(lines);
		setTerminal(path[path.length-1]);
	}	
	//添加终点位置标记及相关动作
	//1.清除"标签"为"t"的"标记" 这里的"t"即 terminal终点的意思 含义:清除目前的终点坐标 
	//2.添加终点位置标记
	function setTerminal(point){
			clearMaker("t");    
			addTerMarker(point);
	}
	//添加终点位置标记
	function addTerMarker(point){       
		var marker = new BMap.Marker(point);
		var label_2 = new BMap.Label("t",{offset:new BMap.Size(20,-10)});
		label_2.setStyle({
			    // display : "none",
				color : "red",
				fontSize : "12px",
				height : "14px",
				lineHeight : "14px",
				fontFamily:"微软雅黑"
				 });				 
		marker.setLabel(label_2);		
		map.addOverlay(marker);    
	}    
	//发送path 
	//Qt中的这个按钮 btn_set_terminal 即是"设置路径 也是"发送路径" 自动按逻辑切换
	//Qt中点击"发送路径",会调用Js中的send_path函数
	//1.清除鼠标点击(click)事件
	//2.path数组的长度为length 数组中每个点的标号分别为0 1 2...length-1
	//定义一个新数组arr,用来存储path数组数组中标号从1 2...length-1的元素 第0个元素不要
	//3.调用Qt中的getPath函数,将设置路径的信息传递到Qt端
	//4.path数组初始化,只存放当前的坐标点cur_point
	function send_path()
	{
	  map.removeEventListener("click", event1);
	  var arr = [];
	  for(i = 0; i < path.length-1; i++)
	  {
		 arr.push(path[i+1].lng);
		 arr.push(path[i+1].lat);
	  }  
	  window.bridge.getPath(JSON.stringify(arr));
	  path=[cur_point];
	}
	//清除路径标记
	//Qt中的这个按钮btn_path_reset 即是"清除路径" 也是"取消设置" 自动按逻辑切换
	//Qt中点击"清除路径",会调用Js中的path_clean函数
	//1.清除地图上所有的覆盖物
	//2.清除"标签"为"t"的"标记" 这里的"t"即 terminal终点的意思 含义:清除目前的终点坐标 
	function path_clean()
	{
	  boolFlag = true;
	  map.clearOverlays();
	  clearMaker("t");
	}	
	//Qt中的这个按钮btn_path_reset 即是"清除路径" 也是"取消设置" 自动按逻辑切换
	//Qt中点击"取消设置",会调用Js中的quit_path_set函数
	//1.清除鼠标点击(click)事件
	//2.调用path_clean函数清除路径
	//3.path数组初始化,只存放当前的坐标点cur_point
	function quit_path_set()
	{
		boolFlag = true;
		map.removeEventListener("click", event1);
		path_clean();
		path=[cur_point];
	}
	//************************************************************************************************
	//获取gps来设置当前点坐标需要用到的两个函数 function theLocation(lon,lat)和function addCurMarker()	
	//用经纬度设置地图中心点,设置当前位置
	//1.如果当前坐标为空(cur_point==null)
	//1.1设置地图缩放等级为19 PC开发时19为最大缩放级别
	//1.2给当前点cur_point赋值 Qt从服务器获取小船当前gps,并且在Qt端调用了Js的theLocation函数来达到在地图上显示小船坐标的效果
	//1.3添加当前位置标记
	//1.4地图跳转到当前点坐在的位置 即调正地图视野范围
	//2.如果当前坐标不为空
	//2.1给当前点cur_point赋值 Qt从服务器获取小船当前gps,并且在Qt端调用了Js的theLocation函数来达到在地图上显示小船坐标的效果
	//2.2添加当前位置标记
	//3.path[0]=cur_point 即path[0]实时存放的都是当前小船的gps坐标 
	function theLocation(lon,lat){
			if (cur_point==null){
				map.setZoom(19);
				cur_point = new BMap.Point(lon,lat);
				addCurMarker();
				map.panTo(cur_point);	
			}
			else{
				cur_point = new BMap.Point(lon,lat);
				addCurMarker();
			}			
			path[0]=cur_point;
		}
	//添加当前位置标记
	//注意addCurMarker函数可以实现在地图上显示小船运行的轨迹 
	//起点 路径 当前
	//起点:用默认的红色标记表示 标签为"start" 显示标签 起点就相当于路径中的第一个点
	//路径:用自定义的标记(yellowdot2.png)显示 标签为"lujing" 不显示该标签
	//当前:用默认的红色标记表示 标签为"cur" 显示标签 当前就相当于路径中的最后一个点
	//因起点和当前这两个点比较特殊,是我们需要在地图上显示的,故特别显示出来 增强地图上的视觉效果
	function addCurMarker(){  		
		var myIcon = new BMap.Icon("yellowdot2.png", new BMap.Size(2, 2), {  
			anchor: new BMap.Size(0, 0),       
			imageOffset: new BMap.Size(0, 0)    
		});      				
		//起点 只设置一次
		if(boolFlag ==true)
		{
			boolFlag = false;
			var marker1 = new BMap.Marker(cur_point); 
			var label_1 = new BMap.Label("start",{offset:new BMap.Size(20,-10)});
			marker1.setLabel(label_1);
			clearMaker("start");
		}
		//路径
		var marker2 = new BMap.Marker(cur_point, {icon: myIcon}); 				
		var label_2 = new BMap.Label("lujing",{offset:new BMap.Size(20,-10)});
		label_2.setStyle(
		{
			display : "none",
		});
		marker2.setLabel(label_2);			
		//当前
		var marker3 = new BMap.Marker(cur_point);
		var label_3 = new BMap.Label("cur",{offset:new BMap.Size(20,-10)});
		marker3.setLabel(label_3);
		clearMaker("cur");
		//添加覆盖物		
		map.addOverlay(marker1);  
		map.addOverlay(marker2);
		map.addOverlay(marker3);
	}     

</script> 
